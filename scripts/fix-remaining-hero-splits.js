#!/usr/bin/env node

/**
 * Fix remaining hero headline splits that were missed
 */

const fs = require('fs');
const path = require('path');

const messagesDir = path.join(__dirname, '../src/i18n/messages');

// Manual fixes for remaining languages
const fixes = {
  'ar.json': {
    'marketing.hero': {
      headlineHighlight: '┘Д┘Д┘Б╪▒┘В ╪з┘Д╪к╪м╪▒┘К╪и┘К╪й',
      headlineHighlightPrefix: '┘Д┘Д┘Б╪▒┘В',
      headlineHighlightMain: '╪з┘Д╪к╪м╪▒┘К╪и┘К╪й'
    },
    'marketing.generational.baby-boomer.hero': {
      headlineHighlight: '┘Д┘Д┘Б╪▒┘В ╪з┘Д╪к╪м╪▒┘К╪и┘К╪й',
      headlineHighlightPrefix: '┘Д┘Д┘Б╪▒┘В',
      headlineHighlightMain: '╪з┘Д╪к╪м╪▒┘К╪и┘К╪й'
    },
    'marketing.generational.gen-x.hero': {
      headlineHighlight: '┘Д╪з ┘З╪▒╪з╪б',
      headlineHighlightPrefix: '',
      headlineHighlightMain: '┘Д╪з ┘З╪▒╪з╪б'
    },
    'marketing.generational.millennial.hero': {
      headlineHighlight: '┘Д┘Д┘Б╪▒┘В ╪з┘Д╪к╪м╪▒┘К╪и┘К╪й',
      headlineHighlightPrefix: '┘Д┘Д┘Б╪▒┘В',
      headlineHighlightMain: '╪з┘Д╪к╪м╪▒┘К╪и┘К╪й'
    },
    'marketing.generational.gen-z.hero': {
      headlineHighlight: '┘Д┘Е┘Ж╪┤╪ж┘К ╪з┘Д╪г╪н╪п╪з╪л',
      headlineHighlightPrefix: '┘Д┘Е┘Ж╪┤╪ж┘К',
      headlineHighlightMain: '╪з┘Д╪г╪н╪п╪з╪л'
    },
    'marketing.generational.gen-alpha.hero': {
      headlineHighlight: '┘Д┘Е┘Ж╪┤╪ж┘К ╪з┘Д╪г╪н╪п╪з╪л',
      headlineHighlightPrefix: '┘Д┘Е┘Ж╪┤╪ж┘К',
      headlineHighlightMain: '╪з┘Д╪г╪н╪п╪з╪л'
    }
  },
  'bn.json': {
    'marketing.hero': {
      headlineHighlight: 'ржЕржнрж┐ржЬрзНржЮрждрж╛ржорзВрж▓ржХ ржжрж▓рзЗрж░ ржЬржирзНржп',
      headlineHighlightPrefix: 'ржЬржирзНржп',
      headlineHighlightMain: 'ржЕржнрж┐ржЬрзНржЮрждрж╛ржорзВрж▓ржХ ржжрж▓рзЗрж░'
    },
    'marketing.generational.baby-boomer.hero': {
      headlineHighlight: 'ржЕржнрж┐ржЬрзНржЮрждрж╛ржорзВрж▓ржХ ржжрж▓рзЗрж░ ржЬржирзНржп',
      headlineHighlightPrefix: 'ржЬржирзНржп',
      headlineHighlightMain: 'ржЕржнрж┐ржЬрзНржЮрждрж╛ржорзВрж▓ржХ ржжрж▓рзЗрж░'
    },
    'marketing.generational.gen-x.hero': {
      headlineHighlight: 'ржХрзЛржи ржмрж┐ржПрж╕ ржирзЗржЗ',
      headlineHighlightPrefix: '',
      headlineHighlightMain: 'ржХрзЛржи ржмрж┐ржПрж╕ ржирзЗржЗ'
    },
    'marketing.generational.millennial.hero': {
      headlineHighlight: 'ржЕржнрж┐ржЬрзНржЮрждрж╛ржорзВрж▓ржХ ржжрж▓рзЗрж░ ржЬржирзНржп',
      headlineHighlightPrefix: 'ржЬржирзНржп',
      headlineHighlightMain: 'ржЕржнрж┐ржЬрзНржЮрждрж╛ржорзВрж▓ржХ ржжрж▓рзЗрж░'
    },
    'marketing.generational.gen-z.hero': {
      headlineHighlight: 'ржЗржнрзЗржирзНржЯ ржирж┐рж░рзНржорж╛рждрж╛ржжрзЗрж░ ржЬржирзНржп',
      headlineHighlightPrefix: 'ржЬржирзНржп',
      headlineHighlightMain: 'ржЗржнрзЗржирзНржЯ ржирж┐рж░рзНржорж╛рждрж╛ржжрзЗрж░'
    },
    'marketing.generational.gen-alpha.hero': {
      headlineHighlight: 'ржЗржнрзЗржирзНржЯ ржирж┐рж░рзНржорж╛рждрж╛ржжрзЗрж░ ржЬржирзНржп',
      headlineHighlightPrefix: 'ржЬржирзНржп',
      headlineHighlightMain: 'ржЗржнрзЗржирзНржЯ ржирж┐рж░рзНржорж╛рждрж╛ржжрзЗрж░'
    }
  },
  'hi.json': {
    'marketing.hero': {
      headlineHighlight: 'рдЕрдиреБрднрд╡рд╛рддреНрдордХ рдЯреАрдореЛрдВ рдХреЗ рд▓рд┐рдП',
      headlineHighlightPrefix: 'рдХреЗ рд▓рд┐рдП',
      headlineHighlightMain: 'рдЕрдиреБрднрд╡рд╛рддреНрдордХ рдЯреАрдореЛрдВ'
    },
    'marketing.generational.baby-boomer.hero': {
      headlineHighlight: 'рдЕрдиреБрднрд╡рд╛рддреНрдордХ рдЯреАрдореЛрдВ рдХреЗ рд▓рд┐рдП',
      headlineHighlightPrefix: 'рдХреЗ рд▓рд┐рдП',
      headlineHighlightMain: 'рдЕрдиреБрднрд╡рд╛рддреНрдордХ рдЯреАрдореЛрдВ'
    },
    'marketing.generational.gen-x.hero': {
      headlineHighlight: 'рдХреЛрдИ рдмреАрдПрд╕ рдирд╣реАрдВ',
      headlineHighlightPrefix: '',
      headlineHighlightMain: 'рдХреЛрдИ рдмреАрдПрд╕ рдирд╣реАрдВ'
    },
    'marketing.generational.millennial.hero': {
      headlineHighlight: 'рдЕрдиреБрднрд╡рд╛рддреНрдордХ рдЯреАрдореЛрдВ рдХреЗ рд▓рд┐рдП',
      headlineHighlightPrefix: 'рдХреЗ рд▓рд┐рдП',
      headlineHighlightMain: 'рдЕрдиреБрднрд╡рд╛рддреНрдордХ рдЯреАрдореЛрдВ'
    },
    'marketing.generational.gen-z.hero': {
      headlineHighlight: 'рдЗрд╡реЗрдВрдЯ рдХреНрд░рд┐рдПрдЯрд░реНрд╕ рдХреЗ рд▓рд┐рдП',
      headlineHighlightPrefix: 'рдХреЗ рд▓рд┐рдП',
      headlineHighlightMain: 'рдЗрд╡реЗрдВрдЯ рдХреНрд░рд┐рдПрдЯрд░реНрд╕'
    },
    'marketing.generational.gen-alpha.hero': {
      headlineHighlight: 'рдЗрд╡реЗрдВрдЯ рдХреНрд░рд┐рдПрдЯрд░реНрд╕ рдХреЗ рд▓рд┐рдП',
      headlineHighlightPrefix: 'рдХреЗ рд▓рд┐рдП',
      headlineHighlightMain: 'рдЗрд╡реЗрдВрдЯ рдХреНрд░рд┐рдПрдЯрд░реНрд╕'
    }
  }
};

// Gen-X variants that need empty prefix (no "for" equivalent)
const genXFixes = [
  'ja.json', 'ko.json', 'mr.json', 'ta.json', 'te.json', 'tr.json', 'ur.json', 'vi.json', 'zh.json'
];

function setNestedProperty(obj, path, value) {
  const parts = path.split('.');
  let current = obj;
  
  for (let i = 0; i < parts.length - 1; i++) {
    if (!current[parts[i]]) {
      current[parts[i]] = {};
    }
    current = current[parts[i]];
  }
  
  current[parts[parts.length - 1]] = value;
}

function getNestedProperty(obj, path) {
  return path.split('.').reduce((current, part) => current?.[part], obj);
}

console.log('ЁЯФз Fixing remaining hero headline splits...\n');

let totalFiles = 0;
let modifiedFiles = 0;

// Fix specific languages (ar, bn, hi)
Object.entries(fixes).forEach(([filename, paths]) => {
  const filepath = path.join(messagesDir, filename);
  
  if (!fs.existsSync(filepath)) {
    console.log(`тПня╕П  Skipping ${filename} (not found)`);
    return;
  }

  console.log(`ЁЯУЭ Processing ${filename}...`);
  totalFiles++;

  try {
    const content = fs.readFileSync(filepath, 'utf8');
    const data = JSON.parse(content);
    
    let modified = false;

    Object.entries(paths).forEach(([path, values]) => {
      setNestedProperty(data, `${path}.headlineHighlightPrefix`, values.headlineHighlightPrefix);
      setNestedProperty(data, `${path}.headlineHighlightMain`, values.headlineHighlightMain);
      console.log(`  тЬУ ${path}: "${values.headlineHighlightPrefix}" + "${values.headlineHighlightMain}"`);
      modified = true;
    });

    if (modified) {
      fs.writeFileSync(filepath, JSON.stringify(data, null, 2) + '\n', 'utf8');
      modifiedFiles++;
      console.log(`  тЬЕ Updated ${filename}\n`);
    }
  } catch (error) {
    console.error(`  тЭМ Error processing ${filename}:`, error.message);
  }
});

// Fix Gen-X variants for languages with postpositions
genXFixes.forEach(filename => {
  const filepath = path.join(messagesDir, filename);
  
  if (!fs.existsSync(filepath)) {
    return;
  }

  console.log(`ЁЯУЭ Processing Gen-X for ${filename}...`);
  totalFiles++;

  try {
    const content = fs.readFileSync(filepath, 'utf8');
    const data = JSON.parse(content);
    
    const genXHero = data.marketing?.generational?.['gen-x']?.hero;
    if (genXHero && genXHero.headlineHighlight && !genXHero.headlineHighlightPrefix) {
      genXHero.headlineHighlightPrefix = '';
      genXHero.headlineHighlightMain = genXHero.headlineHighlight;
      
      console.log(`  тЬУ gen-x: "" + "${genXHero.headlineHighlightMain}"`);
      
      fs.writeFileSync(filepath, JSON.stringify(data, null, 2) + '\n', 'utf8');
      modifiedFiles++;
      console.log(`  тЬЕ Updated ${filename}\n`);
    }
  } catch (error) {
    console.error(`  тЭМ Error processing ${filename}:`, error.message);
  }
});

console.log('\n' + '='.repeat(60));
console.log(`тЬЕ Complete!`);
console.log(`   Files processed: ${totalFiles}`);
console.log(`   Files modified: ${modifiedFiles}`);
console.log('='.repeat(60));
